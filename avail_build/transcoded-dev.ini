[app:main]
# default interval in seconds
default_poll_interval = 0  
# max interval in seconds
max_poll_interval = 60  
# backoff interval in seconds
backoff_poll_interval = 5  

## Pipeline settings 

# When asking for /OUT/* artifacts we expect 5: thumb, small, medium,
# large, metadata; we want to check results to ensure we're not
# matching too widly, a bug, and gonna delete 1000 assets.

max_artifacts_expected = 10

## Queues:
## If there is no next or last queue, leave the queue commented out or omit it
## completely. If it is there with no value the value will be "" instead of
## None and you will get errors like:
## "ClientError: An error occurred (AWS.SimpleQueueService.NonExistentQueue) 
## when calling the GetQueueUrl operation: The specified queue does not exist 
## for this wsdl version." 

avail_pipeline.previous_queue_name = avail-uploaded-dev
avail_pipeline.queue_name = avail-transcoded-dev
avail_pipeline.next_queue_name = avail-published-dev
avail_pipeline.error_queue_name = avail-errored-dev

## AWS settings
avail.aws.dynamodb.jobdb.table_name = availdev-JobStateDB-HXGK79MC2P3P
avail.aws.region = us-east-1
avail.aws.s3.prod.bucket.name = images-assets.dev.nasawestprime.com
avail.aws.s3.tmp.bucket.name = avail-private-dev

# Collection.json URLs start with public bucket from above
avail.collection_root = http://images-assets.dev.nasawestprime.com

# Time to wait before marking job incomplete when no metadata found.
avail.metadata_wait_time = 60

###
# logging configuration
# http://docs.pylonsproject.org/projects/pyramid/en/1.5-branch/narr/logging.html
###

[loggers]
keys = root, avail_pipeline, boto3, botocore, s3transfer

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = DEBUG
handlers = console

[logger_avail_pipeline]
level = DEBUG
handlers =
qualname = avail_pipeline

[logger_boto3]
level = WARNING
handlers =
qualname = boto3

[logger_botocore]
level = INFO
handlers =
qualname = botocore

[logger_s3transfer]
level = INFO
handlers =
qualname = s3transfer

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-8s op_env={{op_env}} avail_role={{avail_role}} ip={{ip_addr}} [%(name)s] %(message)s
